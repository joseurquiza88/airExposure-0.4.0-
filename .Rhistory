paste0("<b>Exposure: </b>", more_exposure_route$exposure," ",units,"/h"))#" ?g m-3/h"))
grid <- map_colors(grid,pollutant)
#  --- Colorgrid
palette_grid <- c("#abdda4","#f8fd66","#fdde61","#d74a4c","#b687ba","#590e63")
palfac <- leaflet::colorFactor(unique(grid$color), domain = grid$category)
# ---  Plot
map <- leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addAwesomeMarkers(
lat = as.numeric(strsplit(origin, ",")[[1]][1]),
lng = as.numeric(strsplit(origin, ",")[[1]][2]),
label = "origin") %>%
leaflet::addAwesomeMarkers(
lat = as.numeric(strsplit(dest, ",")[[1]][1]),
lng = as.numeric(strsplit(dest, ",")[[1]][2]),
label = "destination") %>%
leaflet::addPolylines(data = faster_route_line,weight = 5,stroke = TRUE, color ="#FF0000FF",label = "Faster route",popup=content_fast,group="Faster route") %>%
leaflet::addPolylines(data = shorter_route_line,weight = 5,stroke = TRUE,color ="#ae017e",label = "Shorter route",popup=content_short,group="Shorter route") %>%
leaflet::addPolylines(data = more_polluted_route_line,weight = 5,stroke = TRUE, color ="#00FF66FF",label = "More polluted route",popup=content_more_cont,group="More polluted route")%>%
leaflet::addPolylines(data = less_polluted_route_line,weight = 5, color ="#08306b",label = "Less polluted route",popup=content_less_cont,group="Less polluted route")%>%
leaflet::addPolylines(data = less_exposure_route_line,weight = 5, color ="#016c59",label = "Less exposure route",popup=content_less_exp,group="Less exposure route")%>%
leaflet::addPolylines(data = more_exposure_route_line,weight = 5, color ="#cc4c02",label = "More exposure route",popup=content_more_exp,group="More exposure route")%>%
leaflet::addPolygons(data = grid,color = "#636363" ,
group = "Concentrations",
weight = 2,
smoothFactor = 0.1,
opacity = 0.1,
fillOpacity = 0.5,
fillColor = grid$color#~palfac(grid$category)
)%>%
leaflet::addTiles() %>%
leaflet::addControl(title, position = "topleft", className="map-title")%>%
leaflet::addLegend(data = grid,position = "bottomleft", pal = palfac, values = ~grid$category,
title = paste("US AQI Level",pollutant,units, sep=" ")) %>%
# Layers control
leaflet::addLayersControl(
overlayGroups = c("Concentrations","Less polluted route", "More polluted route", "Shorter route","Faster route", "Less exposure route","More exposure route"))#,"More polluted route Sum", "Less polluted route Sum"))#,
alternative_map <- map
return(alternative_map)
}
#################################################################################
# ------- output POLYLINE
if (output == "polyline"){
df_output <- rbind(faster_route,shorter_route,more_polluted_route,less_polluted_route)
polyline_output<- points_to_line(data = df_output,
long = "long",
lat = "lat",
id_field = "type",
sort_field = "ID")
id_df_output <- data.frame()
df_output%>%
dplyr::group_by(type) %>%
dplyr::group_split() -> group_dat_output
for (p in 1:nrow(polyline_output)){
origin <- origin
destination <- dest
departureTime <- group_dat_output[[p]][["departureTime"]][1]
arrivalTime<- group_dat_output[[p]][["arrivalTime"]][1]
lengthInMeters<- group_dat_output[[p]][["lengthInMeters"]][1]
trafficLengthInMeters <- group_dat_output[[p]][["trafficLengthInMeters"]][1]
travelMode <- group_dat_output[[p]][["travelMode"]][1]
trafficDelayInSeconds<-  group_dat_output[[p]][["trafficDelayInSeconds"]][1]
travelTimeInSeconds<- group_dat_output[[p]][["travelTimeInSeconds"]][1]
liveTrafficIncidentsTravelTimeInSeconds<- group_dat_output[[p]][["liveTrafficIncidentsTravelTimeInSeconds"]][1]
historicTrafficTravelTimeInSeconds <- group_dat_output[[p]][["historicTrafficTravelTimeInSeconds"]][1]
noTrafficTravelTimeInSeconds<- group_dat_output[[p]][["noTrafficTravelTimeInSeconds"]][1]
alternative<-group_dat_output[[p]][["alternative"]][1]
type <- group_dat_output[[p]][["type"]][1]
value <- group_dat_output[[p]][["exposure_value_mean"]][1] #group_dat_output[[p]][["value"]][1]
data_frame_output <- data.frame( origin,destination ,departureTime,
arrivalTime, lengthInMeters,
trafficLengthInMeters,travelMode,
trafficDelayInSeconds,travelTimeInSeconds ,
liveTrafficIncidentsTravelTimeInSeconds,
historicTrafficTravelTimeInSeconds,
noTrafficTravelTimeInSeconds,
alternative, type, value)
names (data_frame_output)<- c("origin","destination" ,"departureTime",
"arrivalTime", "lengthInMeters",
"trafficLengthInMeters","travelMode",
"trafficDelayInSeconds","travelTimeInSeconds",
"liveTrafficIncidentsTravelTimeInSeconds",
"historicTrafficTravelTimeInSeconds",
"noTrafficTravelTimeInSeconds",
"alternative","type","value")
id_df_output <- rbind(id_df_output,data_frame_output)
}
df2_output <- dplyr::left_join(polyline_output, id_df_output, by = "alternative")
}
file.remove(file.path("./temp", dir(path="./temp" ,pattern="temp.*")))
return(df2_output)
}
hourly_grid <- function(hour, time_format,dir){
input_hour <- as.POSIXct(strptime(hour, format = time_format))
hour_exposure<- lubridate::hour(input_hour)
exposure_day <- date(input_hour)
#Change to the directory where the grids are located.
setwd(dir)
# Only the shape files
file_list <- dir(dir,pattern = ".shp")
# The name of the shp file should be in the format %Y-%m-%d_%H%M
table_files <-as.POSIXct(strptime( substr(file_list,1,15), format = "%Y-%m-%d_%H%M"))
# Search file according to the day and hour
searched_date <- which((date(table_files)) == exposure_day)
table_files <- table_files[searched_date]
searched_hour <- which((hour(table_files))== hour_exposure)
file <- table_files[searched_hour]
name_file<- paste(substr(file,1,10),"_",substr(file,12,13),substr(file,15,16),".shp",sep = "")
return(name_file)
}
trajectories_tomtom <- function(origin,dest,mode,hour_trajectory=hour,key){
num_alternative <- 5
#---  hour de departure
hour_trajectory<-as.POSIXct(strptime(hour_trajectory, format = "%Y-%m-%d %H:%M:%S"))
day <- substr (hour_trajectory,1,10)
hour <- substr(hour_trajectory,12,13)
minutes <- substr(hour_trajectory,15,16)
zone_tot <- substr(format(hour_trajectory, "%z"),1,3)
if(substr(zone_tot,1,1)=="-"){
zone <- substr(format(hour_trajectory, "%z"),1,3)
hour_format <- paste(day,"T",hour,"%3A",minutes,"%3A00",zone,"%3A00",sep = "")
}else{
zone <- substr(format(hour_trajectory, "%z"),2,3)
hour_format <- paste(day,"T",hour,"%3A",minutes,"%3A00%2B",zone,"%3A00",sep = "")
}
#mode_transp <- mode
df_rbind <- data.frame()
df_rbind_output <- data.frame()
origin_lat  <- strsplit(origin, ",")[[1]][1]
origin_long<- strsplit(origin, ",")[[1]][2]
destination_lat  <- strsplit(dest, ",")[[1]][1]
destination_long<- strsplit(dest, ",")[[1]][2]
url<- paste0("https://api.tomtom.com/routing/1/calculateRoute/",origin_lat,"%2C",origin_long,"%3A",destination_lat,"%2C",destination_long,
"/json?maxAlternatives=",num_alternative,"&departAt=",hour_format,"&routeRepresentation=polyline&computeTravelTimeFor=all&traffic=true&travelMode=",mode,"&vehicleEngineType=combustion&key=",key)
#---  Request en la API
response <- httr::GET(url)
resp_json <- jsonlite::fromJSON(content(response, as = "text"))
for (j in 1:length(resp_json[["routes"]][["legs"]])){
resp<- data.frame( long = resp_json[["routes"]][["legs"]][[j]][["points"]][[1]][["longitude"]],
lat = resp_json[["routes"]][["legs"]][[j]][["points"]][[1]][["latitude"]],
# --- Arrival and departure time --
departureTime= resp_json[["routes"]][["legs"]][[j]][["summary"]][["departureTime"]],
arrivalTime= resp_json[["routes"]][["legs"]][[j]][["summary"]][["arrivalTime"]],
# --   Distance  ---
lengthInMeters = (resp_json[["routes"]][["legs"]][[j]][["summary"]][["lengthInMeters"]]/1000),
trafficLengthInMeters=resp_json[["routes"]][["legs"]][[j]][["summary"]][["trafficLengthInMeters"]],
travelMode=resp_json[["routes"]][["sections"]][[1]][["travelMode"]][1],
# --- Delay Time
trafficDelayInSeconds=resp_json[["routes"]][["legs"]][[j]][["summary"]][["trafficDelayInSeconds"]],
# ---  Real Time with traffic ---
travelTimeInSeconds = round((resp_json[["routes"]][["legs"]][[j]][["summary"]][["travelTimeInSeconds"]]/60),2),
liveTrafficIncidentsTravelTimeInSeconds=round((resp_json[["routes"]][["legs"]][[j]][["summary"]][["liveTrafficIncidentsTravelTimeInSeconds"]]/60),2),
# ---  Historic Traffic time  ---
historicTrafficTravelTimeInSeconds=round((resp_json[["routes"]][["legs"]][[j]][["summary"]][["historicTrafficTravelTimeInSeconds"]]/60),2),
#   ---  Time without traffic  ---
noTrafficTravelTimeInSeconds= round((resp_json[["routes"]][["legs"]][[j]][["summary"]][["noTrafficTravelTimeInSeconds"]]/60),2),
alternative = paste("alternative_",j,sep=""))
num_rows<-  nrow(resp)
ID <- c(1:num_rows)
data_frame_resp <- cbind(ID , resp)
df_rbind <- rbind(data_frame_resp,df_rbind)
}
df_rbind_output<- rbind(df_rbind,df_rbind_output)
names(df_rbind_output) <- c("ID" , "long","lat" ,"departureTime",
"arrivalTime", "lengthInMeters",
"trafficLengthInMeters","travelMode",
"trafficDelayInSeconds","travelTimeInSeconds" ,
"liveTrafficIncidentsTravelTimeInSeconds",
"historicTrafficTravelTimeInSeconds",
"noTrafficTravelTimeInSeconds",
"alternative")
return(df_rbind_output)
}
# ------- Function for transforming points into lines
points_to_line <- function(data, long, lat, id_field = NULL, sort_field = NULL) {
# Convert to SpatialPointsDataFrame
# If there is a sort field...
if (!is.null(sort_field)) {
if (!is.null(id_field)) {
data <- data[order(data[[id_field]], data[[sort_field]]), ]
} else {
data <- data[order(data[[sort_field]]), ]
}
}
# If there is only one path...
if (is.null(id_field)) {
sp_lines <- sf::st_linestring(as.matrix(data[, c("long", "lat")]))
sp_lines <- sf::st_sfc(sp_lines)
sf::st_crs(sp_lines) <- 4326
return(sp_lines)
# Now, if we have multiple lines...
} else if (!is.null(id_field)) {
paths <- split(data, data[[id_field]])
sp_lines <- sf::st_linestring(as.matrix(paths[[1]][, c("long", "lat")]))
sp_lines <- sf::st_sfc(sp_lines)
sf::st_crs(sp_lines) <- 4326
alternative <- paths[[1]]$alternative[1]
sp_lines <- sf::st_sf(geometry = sp_lines,alternative = alternative)
for (p in 2:length(paths)) {
l <- sf::st_linestring(as.matrix(paths[[p]][, c("long", "lat")]))
l <- sf::st_sfc(l)
sf::st_crs(l) <- 4326
alternative <- paths[[p]]$alternative[1]
sp_lines2 <- sf::st_sf(geometry = l,alternative = alternative)
sp_lines <- rbind(sp_lines, sp_lines2)
}
return(sp_lines)
}
}
temporary_grid_search <- function(start_hour, end_hour=NULL,dir,time_format, gridID, shapeValue){
# --- Function that looks for the grid (.shp) corresponding to the hour of interest entered
trajectory_grid_rbind <- data.frame()
# Init time
only_start_hour <- lubridate::hour(as.POSIXct(strptime(start_hour, format = time_format)))
# End time
only_end_hour <- lubridate::hour(as.POSIXct(strptime(end_hour, format = time_format)))
#  ---
if (is.null(end_hour)){
df_start_grids <- sf::st_read(hourly_grid(start_hour, time_format = time_format,dir),quiet = TRUE)
df_start_grid <- sf::st_transform(df_start_grids,crs = 4326)# Always transform the CRS in 4326
names(df_start_grid)[names(df_start_grid) == gridID] <- "ID"
#ID <- st_drop_geometry(df_start_grid)[gridID]
#names(ID) <- "ID"
#df_start_grid <- cbind(df_start_grid,ID)
}
#  --- When there is only one grid
else if (only_start_hour == only_end_hour ){
trajectory_grid <- sf::st_read(hourly_grid(start_hour, time_format = time_format,dir),quiet = TRUE)
salida<- sf::st_transform(trajectory_grid,crs = 4326)
names(salida)[names(salida) == gridID] <- "ID"
}else{
# --- When there are several grids we do an average per pixel
for(j in only_start_hour:only_end_hour){
if (j < 10){
j_hour <- paste("0",j,sep = "")
}else{
j_hour <- j
}
zone <- substr(start_hour, nchar(start_hour) - 2, nchar(start_hour))
day <- paste(substr(start_hour,1,10),paste(j_hour,":00:00",sep = ""), zone,sep = " ")
trajectory_grid <- sf::st_read(hourly_grid(day, time_format = "%Y-%m-%d %H:%M:%S",dir),quiet = TRUE)
trajectory_grid$hour <- day
trajectory_grid_rbind <- rbind(trajectory_grid_rbind,trajectory_grid)
}
## ------------ Group by the ID of the grid and make the mean of each pixel
ID <- sf::st_drop_geometry(trajectory_grid_rbind)#[gridID]
names(ID) <- "ID"
trajectory_grid_rbind <- cbind(trajectory_grid_rbind,ID)
trajectory_grid_rbind %>%
dplyr::group_by(ID) %>%
dplyr::group_split() -> data_grilla
df_grilla <- data.frame()
for (p in 1:length(data_grilla)){
ID <- data_grilla[[p]][["ID"]][1]
value <- mean(data_grilla[[p]][[shapeValue]],na.rm = T)
geometry <- data_grilla[[p]][["geometry"]][1]
df <- data.frame(ID = ID, value = value,
geometry = geometry)
df_grilla <- rbind(df_grilla ,df)
}
sf::st_write(df_grilla,"./temp/temp_grid.shp",delete_layer = TRUE,quiet = TRUE)
trajectory_grid<- sf::st_read("./temp/temp_grid.shp",quiet = TRUE)
salida<- sf::st_transform(trajectory_grid,crs = 4326)
}
if(is.null(end_hour)){
return(df_start_grid)
}else{
return(salida)
}
}
# ------- Function to convert hours to minutes
function_hours <- function(minutes){
minutes <- round(minutes)
hs_tot <- (minutes/60)
integer <- floor(hs_tot)
decimal <- hs_tot-integer
mins <- round((decimal*60/1),1)
if (integer<=9){
integer_2 <- paste("0",integer,sep = "")
}else{
integer_2<- integer
}
if (mins<=9){
mins_2 <- paste("0",mins,sep = "")
}else{
mins_2<- mins
}
output <- (paste (integer_2,mins_2,sep=":"))
return (output)
}
map_colors <- function(grid,pollutant){
#PM2.5 (μg/m3) 24-hour
if (pollutant == "PM2.5"){
print(c("The entered pollutant is: ",pollutant))
grid$category = dplyr::case_when(grid$value<=12.1 ~ 'Good',
grid$value>12.1 & grid$value <= 35.4  ~ 'Moderate',
grid$value >35.4 & grid$value <= 55.4  ~ 'Unhealthy for sensible groups',
grid$value > 55.4 & grid$value <= 150.4  ~ 'Unhealthy',
grid$value > 150.4 & grid$value <= 250.4  ~ 'Very unhealthy',
grid$value > 250.4 ~ 'Hazardous' )
grid$color = dplyr::case_when(grid$category == 'Good' ~ "#abdda4",
grid$category == 'Moderate'~"#f8fd66",
grid$category == 'Unhealthy for sensible groups'~"#fdde61",
grid$category == 'Unhealthy'~"#d74a4c",
grid$category == 'Very unhealthy'~"#b687ba",
grid$category == 'Hazardous' ~"#590e63")
}
else if (pollutant == "PM10"){ #PM10 (μg/m3) 24-hour
print(c("The entered pollutant is: ",pollutant))
grid$category = dplyr::case_when(grid$value<=54 ~ 'Good',
grid$value>54 & grid$value <= 154  ~ 'Moderate',
grid$value >154 & grid$value <= 254  ~ 'Unhealthy for sensible groups',
grid$value > 254 & grid$value <= 354  ~ 'Unhealthy',
grid$value > 354 & grid$value <= 424  ~ 'Very unhealthy',
grid$value > 424 ~ 'Hazardous' )
grid$color = dplyr::case_when(grid$category == 'Good' ~ "#abdda4",
grid$category == 'Moderate'~"#f8fd66",
grid$category == 'Unhealthy for sensible groups'~"#fdde61",
grid$category == 'Unhealthy'~"#d74a4c",
grid$category == 'Very unhealthy'~"#b687ba",
grid$category == 'Hazardous' ~"#590e63")
}
else if (pollutant == "CO"){ #CO (ppm) 8-hour
print(c("The entered pollutant is: ",pollutant))
grid$category = dplyr::case_when(grid$value<= 4.4 ~ 'Good',
grid$value> 4.4 & grid$value <= 9.4  ~ 'Moderate',
grid$value > 9.4 & grid$value <= 12.4  ~ 'Unhealthy for sensible groups',
grid$value > 12.4 & grid$value <= 15.4  ~ 'Unhealthy',
grid$value > 15.4 & grid$value <= 30.4  ~ 'Very unhealthy',
grid$value > 30.4 ~ 'Hazardous' )
grid$color = dplyr::case_when(grid$category == 'Good' ~ "#abdda4",
grid$category == 'Moderate'~"#f8fd66",
grid$category == 'Unhealthy for sensible groups'~"#fdde61",
grid$category == 'Unhealthy'~"#d74a4c",
grid$category == 'Very unhealthy'~"#b687ba",
grid$category == 'Hazardous' ~"#590e63")
}
else if (pollutant == "SO2"){ #SO2 (ppb) 1-hour
print(c("The entered pollutant is: ",pollutant))
grid$category = dplyr::case_when(grid$value<= 35 ~ 'Good',
grid$value> 35 & grid$value <= 75  ~ 'Moderate',
grid$value > 75 & grid$value <= 185  ~ 'Unhealthy for sensible groups',
grid$value > 185 & grid$value <= 304  ~ 'Unhealthy', ##4 1-hour SO2 values do not define higher AQI values (≥ 200). AQI values of 200 or greater are calculated with 24-hour SO2 concentrations.
grid$value > 304 & grid$value <= 604  ~ 'Very unhealthy', #4 1-hour SO2 values do not define higher AQI values (≥ 200). AQI values of 200 or greater are calculated with 24-hour SO2 concentrations.
grid$value > 604 ~ 'Hazardous' ) #4 1-hour SO2 values do not define higher AQI values (≥ 200). AQI values of 200 or greater are calculated with 24-hour SO2 concentrations.
grid$color = dplyr::case_when(grid$category == 'Good' ~ "#abdda4",
grid$category == 'Moderate'~"#f8fd66",
grid$category == 'Unhealthy for sensible groups'~"#fdde61",
grid$category == 'Unhealthy'~"#d74a4c",
grid$category == 'Very unhealthy'~"#b687ba",
grid$category == 'Hazardous' ~"#590e63")
}
else if (pollutant == "NO2"){ #NO2 (ppb) 1-hour
print(c("The entered pollutant is: ",pollutant))
grid$category = dplyr::case_when(grid$value<= 53 ~ 'Good',
grid$value> 53 & grid$value <= 100  ~ 'Moderate',
grid$value > 100 & grid$value <= 360  ~ 'Unhealthy for sensible groups',
grid$value > 360 & grid$value <= 649  ~ 'Unhealthy',
grid$value > 649 & grid$value <= 1249  ~ 'Very unhealthy',
grid$value > 1250 ~ 'Hazardous' )
grid$color = dplyr::case_when(grid$category == 'Good' ~ "#abdda4",
grid$category == 'Moderate'~"#f8fd66",
grid$category == 'Unhealthy for sensible groups'~"#fdde61",
grid$category == 'Unhealthy'~"#d74a4c",
grid$category == 'Very unhealthy'~"#b687ba",
grid$category == 'Hazardous' ~"#590e63")
}
else if (pollutant == "O3" ||pollutant == "o3"){ #O3 (ppm) 1-hour
print(c("The entered pollutant is: ",pollutant))
grid$category = dplyr::case_when(
grid$value >0.125 & grid$value <= 0.164 ~ 'Unhealthy for sensible groups',
grid$value > 0.164 & grid$value <= 0.204  ~ 'Unhealthy',
grid$value > 0.204 & grid$value <= 0.404  ~ 'Very unhealthy',
grid$value > 0.404 ~ 'Hazardous' )
grid$color = dplyr::case_when(grid$category == 'Good' ~ "#abdda4",
grid$category == 'Moderate'~"#f8fd66",
grid$category == 'Unhealthy for sensible groups'~"#fdde61",
grid$category == 'Unhealthy'~"#d74a4c",
grid$category == 'Very unhealthy'~"#b687ba",
grid$category == 'Hazardous' ~"#590e63")
}
else{
stop("The exposure to this pollutant cannot be modeled.")
}
return(grid)
}
# -----------------------------------------------------------------------------
# --------------------------- TOTAL EXPOSURE FUNCTION EXAMPLE -----------------------------
#
# 01. Origin-Destination points
# One destination
travel_list <- data.frame(long = c(-68.86805,-68.833412),
lat = c(-32.940088,-32.92984))
concentrations_grid<- "D:/Josefina/paper_git/paper_exposure_model/grid_example"
dir <- concentrations_grid
key <- "YOdvX5qKwpk9YRl9v0JzqC5qSYNOwbDc"
mode = c("bicycle","car")
selection <- c("moreexpos”, moreexpos ")
selection <- c("moreexpos”, moreexpos")
## 07. Departure time from home for the first time.
departure_time_home <- "2019-08-01 08:00:00"
## 08. Duration of each activity.
activity_minutes<-data.frame(activity_minutes = 300)
## 09. Pollutant
pollutant <- "PM2.5"
## 10. Name ID grid
gridID <- "GRI1_ID"
## 11. Name value grid
shapeValue <- "value"
## 12. Pollutant unit
units <-  "μg/m3 24-hour"
## Run the function
# output DF
test_df <- total_exposure (travel_list, mode, dir,key,selection,output_exp="df",departure_time_home, activity_minutes,pollutant,shapeValue ,gridID,units)
selection
selection <- c("moreexpos", "moreexpos")
selection <- c("lessexpos","lesspol")
selection <- c("moreexpos", "moreexpos")
# output plot
test_plot <- total_exposure (travel_list, mode, dir,key,selection,output_exp="plot",departure_time_home, activity_minutes,pollutant,shapeValue ,gridID,units)
test_plot
# -----------------------------------------------------------------------------
# --------------------------- TOTAL EXPOSURE FUNCTION EXAMPLE -----------------------------
#
# 01. Origin-Destination points
# One destination
travel_list <- data.frame(long = c(-68.86805,-68.833412),
lat = c(-32.940088,-32.92984))
key <- "YOdvX5qKwpk9YRl9v0JzqC5qSYNOwbDc"##
concentrations_grid<- "D:/Josefina/paper_git/paper_exposure_model/madridGrid/"
dir <- concentrations_grid
# 03. Transport mode - Always consider the round trip
mode = c("car","car")
travel_list <- data.frame(long = c(-3.6989010112670675,-3.6925284079297023),
lat = c(40.40501989873148,40.39189343817806))
# 02. Key tom-tom
# 03. Transport mode - Always consider the round trip
mode = c("car","car")
# 04. Path with the hourly grids
#Example CALPUFF grids for 01-08-2019 for Metropolitan Area of Mendoza, Argentina. The grids must be by day-hour
key <- "YOdvX5qKwpk9YRl9v0JzqC5qSYNOwbDc"##
concentrations_grid<- "D:/Josefina/paper_git/paper_exposure_model/grid_example"
dir <- concentrations_grid
setwd(dir)
# 05. Type of route selected
selection <- c("fast","fast")
## 07. Departure time from home for the first time.
departure_time_home <- "2023-12-09 07:00:00" #2023-12-09_0100
## 08. Duration of each activity.
activity_minutes<-data.frame(activity_minutes = 300)
## 09. Pollutant
pollutant <- "PM2.5"
## 10. Name ID grid
gridID <- "ID"
## 11. Name value grid
shapeValue <- "value"
## 12. Pollutant unit
units <-  "μg/m3 24-hour"
## Run the function
# output DF
test_df <- total_exposure (travel_list, mode, dir,key,selection,output_exp="df",departure_time_home, activity_minutes,pollutant,shapeValue ,gridID,units)
concentrations_grid<- "D:/Josefina/paper_git/paper_exposure_model/madridGrid"
dir <- concentrations_grid
setwd(dir)
# 05. Type of route selected
selection <- c("fast","fast")
## 07. Departure time from home for the first time.
departure_time_home <- "2023-12-09 07:00:00" #2023-12-09_0100
## 08. Duration of each activity.
activity_minutes<-data.frame(activity_minutes = 300)
## 09. Pollutant
pollutant <- "PM2.5"
## 10. Name ID grid
gridID <- "ID"
## 11. Name value grid
shapeValue <- "value"
## 12. Pollutant unit
units <-  "μg/m3 24-hour"
# output plot
test_plot <- total_exposure (travel_list, mode, dir,key,selection,output_exp="plot",departure_time_home, activity_minutes,pollutant,shapeValue ,gridID,units)
htmlwidgets::saveWidget(test_plot , "example_plot.html")
getwd()
rbind_df_1 <- data.frame()
rbind_route_select <- data.frame()
df_output <- data.frame()
i<-1
# If i=1 consider the departure time entered in the function
origin_coords <- paste((travel_list[i,2]),(travel_list[i,1]),sep = ",")
destination_coords <- paste((travel_list[i+1,2]),(travel_list[i+1,1]),sep = ",")
selection_route <-  alternative_trajectories (origin=origin_coords,dest=destination_coords,mode=mode[i], dir,key=key,output = "df",hour = departure_time_home,gridID,shapeValue, units)
View(selection_route)
departure_time_home
Sys.setenv(TZ = "Europe/Madrid")
## 07. Departure time from home for the first time.
departure_time_home <- "2023-12-09 07:00:00" #2023-12-09_0100
## 08. Duration of each activity.
activity_minutes<-data.frame(activity_minutes = 300)
## 09. Pollutant
pollutant <- "PM2.5"
## 10. Name ID grid
gridID <- "ID"
## 11. Name value grid
shapeValue <- "value"
## 12. Pollutant unit
units <-  "μg/m3 24-hour"
# output plot
test_plot2 <- total_exposure (travel_list, mode, dir,key,selection,output_exp="plot",departure_time_home, activity_minutes,pollutant,shapeValue ,gridID,units)
test_plot2
htmlwidgets::saveWidget(test_plot2 , "example_plot2.html")
getwd()
setwd("D:/Josefina/paper_git/paper_exposure_model/code_5")
setwd("D:/Josefina/paper_git/paper_exposure_model/code_05")
